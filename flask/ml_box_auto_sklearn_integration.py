# -*- coding: utf-8 -*-
"""ML_box_Auto_sklearn_integration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wr_jyCgvyS3ltXMEM7alhEL97PhBzw0c

**Mobile Price Prediction using Auto Sklearn**
"""

!pip install mlbox
!pip install auto-sklearn

# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import math

from mlbox.preprocessing import *
from mlbox.optimisation import *
from mlbox.prediction import *

target_name = "is_happy_customer"  #will change as per user choice
xl=pd.read_excel('dirty_data.xls')
ndf=xl.loc[0:int(xl.shape[0]*0.03)]  #losing 3 percent of the data, for the sake of drifting process, i.e. removing unncessary columns
xl.drop(xl.index[0:math.ceil(xl.shape[0]*0.03)],0,inplace=True)
ndf.drop(target_name,axis='columns', inplace=True)
ndf.to_excel('test.xls')
xl.to_excel('train.xls')
paths=["train.xls","test.xls"]

rd = Reader(sep = ',')
df = rd.train_test_split(paths, target_name)

dft = Drift_thresholder()
df = dft.fit_transform(df) # this drops the unncessary columns automatically, like ids, and anything which isn't useful.

#this converts any remaining object columns, into categorical, since thats the only remaining type 
for col in df['train'].columns:
  if df['train'].dtypes[col] == np.object:
    df['train'] = df['train'].astype({col:'category'})

#confirming that all columns have the right datatype
df['train'].info()

# Split train and test set
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(df['train'],df['target'],test_size=0.2,random_state=42)

# Training
#for now, this code will work on classification task. Similarly can be done for regression.
import autosklearn.classification
#time left for task, is in seconds, it decides how long to train the model. Can be a user input, to improve accuracy on very large datasets
automl = autosklearn.classification.AutoSklearnClassifier(time_left_for_this_task=240,per_run_time_limit=30)
automl.fit(X_train,Y_train)
print("AutoSkLearn Model Accuracy: {:2f}%".format(automl.score(X_test,Y_test)*100))

#shows stats of the training process
print(automl.sprint_statistics())

#shows the different algorithms tested, and their ranks
print(automl.leaderboard())

X_test.head()

#test input
t=X_test.iloc[[3]]

Y_test.iloc[[3]]

automl.predict(t)[0]

